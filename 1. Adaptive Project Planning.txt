import React, { useState, useRef, forwardRef, useEffect } from "react";
import { Select, SelectProps, Option } from "@citi-icg-172888/icgds-react";
import { FixedSizeList as List } from "react-window";
import _ from "lodash";

interface ISelectHocProps extends SelectProps {
  options: string[];
  onChange?: (options: string[]) => void;
  width?: string;
  isDisabled?: boolean;
  error?: string;
  label?: string;
}

const SelectHoc = forwardRef<HTMLDivElement, ISelectHocProps>((props, ref) => {
  const { onChange, options, className, id, error, label } = props;
  const [isOpen, setIsOpen] = useState(false);
  const [highlightedIndex, setHighlightedIndex] = useState(-1);
  const listRef = useRef<any>(null);
  const optionsRefs = useRef<(HTMLDivElement | null)[]>([]);

  useEffect(() => {
    if (highlightedIndex >= 0 && optionsRefs.current[highlightedIndex]) {
      optionsRefs.current[highlightedIndex]?.scrollIntoView({ block: "nearest" });
    }
  }, [highlightedIndex]);

  const onChangeHandler = (selectedOptions: string[]) => {
    onChange && onChange(selectedOptions);
    setIsOpen(false);
  };

  const handleKeyDown = (event: React.KeyboardEvent) => {
    switch (event.key) {
      case "ArrowDown":
        event.preventDefault();
        setHighlightedIndex((prevIndex) => (prevIndex + 1) % options.length);
        break;
      case "ArrowUp":
        event.preventDefault();
        setHighlightedIndex((prevIndex) => (prevIndex - 1 + options.length) % options.length);
        break;
      case "Enter":
        event.preventDefault();
        if (highlightedIndex >= 0) {
          onChangeHandler([options[highlightedIndex]]);
        }
        break;
      case "Escape":
        setIsOpen(false);
        break;
      default:
        break;
    }
  };

  const Row = ({ index, style }: { index: number; style: React.CSSProperties }) => (
    <Option
      key={options[index]}
      label={options[index]}
      aria-label={options[index]}
      value={options[index]}
      ref={(el: HTMLDivElement | null) => (optionsRefs.current[index] = el)}
      aria-selected={highlightedIndex === index}
      style={style} // Style from virtualization
    >
      {options[index]}
    </Option>
  );

  return (
    <div
      className={className}
      tabIndex={0}
      ref={ref}
      onFocus={() => setIsOpen(true)}
      onBlur={() => setIsOpen(false)}
      onKeyDown={handleKeyDown}
      aria-expanded={isOpen}
      role="combobox"
      aria-haspopup="listbox"
      aria-owns={`${id}-listbox`}
      aria-controls={`${id}-listbox`}
      aria-label={label}
      aria-activedescendant={highlightedIndex >= 0 ? `${id}-option-${highlightedIndex}` : undefined}
    >
      <Select
        {...props}
        id={id}
        style={{
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap",
        }}
        aria-label={label}
        invalid={!!error}
        showSearch
        onChange={(option: any) => onChangeHandler(option)}
        getPopupContainer={() => document.querySelector("#root")}
      >
        {isOpen && (
          <List
            height={200} // Set dropdown height
            itemCount={options.length}
            itemSize={40} // Adjust row height
            width="100%"
            ref={listRef}
          >
            {Row}
          </List>
        )}
      </Select>
    </div>
  );
});

SelectHoc.defaultProps = {
  highlightOption: true,
  mode: "default",
  tagColor: "selected",
};

export default SelectHoc;
