import React, { useState, useRef, useEffect, forwardRef } from "react";
import { Select, SelectProps, Option } from "@citi-icg-172888/icgds-react";
import { useVirtualizer } from "@tanstack/react-virtual";
import _ from "lodash";

interface ISelectHocProps extends SelectProps {
  options: string[];
  onChange?: (selected: string[]) => void;
  width?: string;
  isDisabled?: boolean;
  error?: string;
  label?: string;
}

const SelectHoc = forwardRef<HTMLDivElement, ISelectHocProps>((props, ref) => {
  const { onChange, options, className, id, error, label } = props;
  const [isOpen, setIsOpen] = useState(false);
  const [highlightedIndex, setHighlightedIndex] = useState(-1);

  const containerRef = useRef<HTMLDivElement | null>(null);

  // Virtualizer (Efficient Scrolling for Large Lists)
  const rowVirtualizer = useVirtualizer({
    count: options.length,
    getScrollElement: () => containerRef.current,
    estimateSize: () => 40, // Set item height
    overscan: 5, // Renders extra items for smooth scroll
  });

  useEffect(() => {
    if (highlightedIndex >= 0) {
      rowVirtualizer.scrollToIndex(highlightedIndex);
    }
  }, [highlightedIndex]);

  const onChangeHandler = (selectedOptions: string[]) => {
    onChange && onChange(selectedOptions);
    setIsOpen(false);
  };

  const handleKeyDown = (event: React.KeyboardEvent) => {
    switch (event.key) {
      case "ArrowDown":
        event.preventDefault();
        setHighlightedIndex((prev) => Math.min(prev + 1, options.length - 1));
        break;
      case "ArrowUp":
        event.preventDefault();
        setHighlightedIndex((prev) => Math.max(prev - 1, 0));
        break;
      case "Enter":
        event.preventDefault();
        if (highlightedIndex >= 0) {
          onChangeHandler([options[highlightedIndex]]);
        }
        break;
      case "Escape":
        setIsOpen(false);
        break;
      default:
        break;
    }
  };

  return (
    <div
      className={className}
      tabIndex={0}
      ref={ref}
      onFocus={() => setIsOpen(true)}
      onBlur={() => setIsOpen(false)}
      onKeyDown={handleKeyDown}
      aria-expanded={isOpen}
      role="combobox"
      aria-haspopup="listbox"
      aria-owns={`${id}-listbox`}
      aria-controls={`${id}-listbox`}
      aria-label={label}
      aria-activedescendant={highlightedIndex >= 0 ? `${id}-option-${highlightedIndex}` : undefined}
    >
      <Select
        {...props}
        id={id}
        style={{
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap",
        }}
        aria-label={label}
        invalid={!!error}
        showSearch
        onChange={(option: any) => onChangeHandler(option)}
        getPopupContainer={() => document.querySelector("#root")}
      >
        {isOpen && (
          <div
            ref={containerRef}
            style={{
              height: 200,
              overflowY: "auto",
              position: "relative",
              width: "100%",
            }}
          >
            <div style={{ height: `${rowVirtualizer.getTotalSize()}px`, position: "relative" }}>
              {rowVirtualizer.getVirtualItems().map((virtualRow) => (
                <Option
                  key={options[virtualRow.index]}
                  label={options[virtualRow.index]}
                  aria-label={options[virtualRow.index]}
                  value={options[virtualRow.index]}
                  id={`${id}-option-${virtualRow.index}`}
                  aria-selected={highlightedIndex === virtualRow.index}
                  style={{
                    position: "absolute",
                    top: `${virtualRow.start}px`,
                    width: "100%",
                    height: "40px",
                    display: "flex",
                    alignItems: "center",
                    padding: "10px",
                  }}
                >
                  {options[virtualRow.index]}
                </Option>
              ))}
            </div>
          </div>
        )}
      </Select>
    </div>
  );
});

SelectHoc.defaultProps = {
  highlightOption: true,
  mode: "default",
  tagColor: "selected",
};

export default SelectHoc;


npm install @tanstack/react-virtual
