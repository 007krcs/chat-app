import { FC, useState, useEffect, useRef } from "react";
import { Select, SelectProps, Option } from "@citi-icg-172888/icgds-react";
import _ from "lodash";

interface ISelectHocProps extends SelectProps {
  options: string[];
  onChange?: (options: string[]) => void;
  width?: string;
  isDisabled?: boolean;
  error?: string;
  label?: string;
  ref?: any;
}

const SelectHoc: FC<ISelectHocProps> = (props) => {
  const { onChange, options, className, id, error, label, ref } = props;
  const onChangeHandler = (selectedOptions: string[]) => {
    onChange && onChange(selectedOptions);
  };
  
  const [isOpen, setIsOpen] = useState(false);
  const [highlightedIndex, setHighlightedIndex] = useState(-1);
  const optionsRefs = useRef<(HTMLDivElement | null)[]>([]);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);

  const handleKeyDown = (event: React.KeyboardEvent) => {
    switch (event.key) {
      case "ArrowDown":
        event.preventDefault();
        setHighlightedIndex((prevIndex) => (prevIndex + 1) % options.length);
        break;
      case "ArrowUp":
        event.preventDefault();
        setHighlightedIndex((prevIndex) => (prevIndex - 1 + options.length) % options.length);
        break;
      case "Enter":
      case "Escape":
        event.preventDefault();
        if (highlightedIndex >= 0) {
          const selectedValue = options[highlightedIndex];
          setSelectedOption(selectedValue);
          onChangeHandler([selectedValue]);
        }
        setIsOpen(false);
        break;
      default:
        break;
    }
  };

  useEffect(() => {
    if (highlightedIndex >= 0 && optionsRefs.current[highlightedIndex]) {
      optionsRefs.current[highlightedIndex]?.focus();
    }
  }, [highlightedIndex]);

  return (
    <div
      className={className}
      onKeyDown={handleKeyDown}
      ref={ref}
      onFocus={() => setIsOpen(true)}
      onBlur={() => setIsOpen(false)}
      aria-expanded={isOpen}
      role="combobox"
      aria-haspopup="listbox"
      aria-owns="select-options"
      aria-controls="select-options"
      aria-label={label}
      aria-activedescendant={
        highlightedIndex >= 0 ? `option-${highlightedIndex}` : undefined
      }
    >
      <Select
        {...props}
        id={id}
        size="default"
        optionLabelProp="label"
        optionFilterProp="label"
        aria-label={label}
        invalid={!!error}
        showSearch
        placeholder="Please select"
        onChange={(option: any) => {
          setSelectedOption(option);
          onChangeHandler([option]);
        }}
        getPopupContainer={() => document.querySelector("#root")}
      >
        {_.map(options, (option, index) => (
          <div
            id={`option-${index}`}
            role="option"
            aria-selected={selectedOption === option}
            ref={(el: HTMLDivElement | null) => (optionsRefs.current[index] = el)}
            tabIndex={-1}
            style={{
              padding: "8px",
              backgroundColor: selectedOption === option ? "#e0e0e0" : "transparent",
              fontWeight: selectedOption === option ? "bold" : "normal",
              cursor: "pointer",
            }}
            onClick={() => {
              setSelectedOption(option);
              onChangeHandler([option]);
              setIsOpen(false);
            }}
            onKeyDown={(e) => {
              if (e.key === "Enter" || e.key === " ") {
                setSelectedOption(option);
                onChangeHandler([option]);
                setIsOpen(false);
              }
            }}
          >
            {option}
          </div>
        ))}
      </Select>

      {/* Announce selected value for NVDA */}
      <div 
        aria-live="assertive" 
        style={{ position: "absolute", height: 0, width: 0, overflow: "hidden" }}>
        {selectedOption ? `Selected ${selectedOption}` : ""}
      </div>
    </div>
  );
};

SelectHoc.defaultProps = {
  highlightOption: true,
  mode: "default",
  tagColor: "selected",
};

export default SelectHoc;
