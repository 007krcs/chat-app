import React, { useState, useRef, useEffect } from 'react';

interface SelectProps {
  id: string;
  label: string;
  value: string[];
  selectedValues?: string[];
  selectedValue?: string;
  multiSelect?: boolean;
  searchable?: boolean;
  placeholder?: string;
  error?: string;
  onChange?: (values: string[] | string) => void;
}

const CustomSelect: React.FC<SelectProps> = ({
  id,
  label,
  value = [],
  selectedValues = [],
  selectedValue = '',
  multiSelect = false,
  searchable = false,
  placeholder = 'Select...',
  error,
  onChange,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selected, setSelected] = useState<string[]>(
    multiSelect ? selectedValues : selectedValue ? [selectedValue] : []
  );

  const containerRef = useRef<HTMLDivElement>(null);

  const toggleDropdown = () => setIsOpen((prev) => !prev);

  const handleSelect = (val: string) => {
    let newSelected;

    if (multiSelect) {
      if (selected.includes(val)) {
        newSelected = selected.filter((v) => v !== val);
      } else {
        newSelected = [...selected, val];
      }
    } else {
      newSelected = [val];
      setIsOpen(false);
    }

    setSelected(newSelected);
    onChange && onChange(multiSelect ? newSelected : newSelected[0]);
  };

  const clearAll = () => {
    setSelected([]);
    onChange && onChange(multiSelect ? [] : '');
  };

  const handleClickOutside = (event: MouseEvent) => {
    if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
      setIsOpen(false);
    }
  };

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const filteredOptions = searchable
    ? value.filter((val) => val.toLowerCase().includes(searchTerm.toLowerCase()))
    : value;

  return (
    <div className="select-container" ref={containerRef}>
      <label id={`${id}-label`} htmlFor={id}>{label}</label>
      <div
        role="combobox"
        aria-haspopup="listbox"
        aria-expanded={isOpen}
        aria-controls={`${id}-listbox`}
        tabIndex={0}
        className={`select-input ${error ? 'select-error' : ''}`}
        onClick={toggleDropdown}
        onKeyDown={(e) => { if (e.key === 'Enter') toggleDropdown(); }}
      >
        {multiSelect
          ? selected.length ? selected.join(', ') : placeholder
          : selected[0] || placeholder}
      </div>

      {error && <div className="error-message">{error}</div>}

      {isOpen && (
        <div className="dropdown-list" role="listbox" id={`${id}-listbox`}>
          {searchable && (
            <input
              type="text"
              placeholder="Search"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
          )}

          <ul>
            {filteredOptions.map((val) => (
              <li
                key={val}
                role="option"
                aria-selected={selected.includes(val)}
                tabIndex={0}
                className={`dropdown-option ${selected.includes(val) ? 'selected' : ''}`}
                onClick={() => handleSelect(val)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' || e.key === ' ') handleSelect(val);
                }}
              >
                {multiSelect && (
                  <input type="checkbox" readOnly checked={selected.includes(val)} />
                )}
                {val}
              </li>
            ))}
          </ul>

          <div className="dropdown-footer">
            {multiSelect && (
              <button className="clear-btn" onClick={clearAll}>Clear All</button>
            )}
            <button className="apply-btn" onClick={() => setIsOpen(false)}>Apply</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CustomSelect;
