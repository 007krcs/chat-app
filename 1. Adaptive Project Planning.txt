import { FC, useState, useEffect, useRef } from "react";
import { Select, SelectProps, Option } from "@citi-icg-172888/icgds-react";
import _ from "lodash";

interface ISelectHocProps extends SelectProps {
  options: string[];
  onChange?: (options: string[]) => void;
  width?: string;
  isDisabled?: boolean;
  error?: string;
  label?: string;
  ref?: any;
}

const SelectHoc: FC<ISelectHocProps> = (props) => {
  const { onChange, options, className, id, error, label, ref } = props;
  const onChangeHandler = (options: string[]) => {
    onChange && onChange(options);
  };
  
  const [isOpen, setIsOpen] = useState(false);
  const [highlightedIndex, setHighlightedIndex] = useState(-1);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const optionsRefs = useRef<(HTMLDivElement | null)[]>([]);

  const handleKeyDown = (event: React.KeyboardEvent) => {
    switch (event.key) {
      case "ArrowDown":
        event.preventDefault();
        setHighlightedIndex((prevIndex) => (prevIndex + 1) % options.length);
        break;
      case "ArrowUp":
        event.preventDefault();
        setHighlightedIndex((prevIndex) => (prevIndex - 1 + options.length) % options.length);
        break;
      case "Enter":
        event.preventDefault();
        if (highlightedIndex >= 0) {
          const selectedValue = options[highlightedIndex];
          setSelectedOption(selectedValue);
          onChangeHandler([selectedValue]);
          setIsOpen(false);
        }
        break;
      case "Escape":
        setIsOpen(false);
        break;
      default:
        break;
    }
  };

  useEffect(() => {
    if (highlightedIndex >= 0 && optionsRefs.current[highlightedIndex]) {
      optionsRefs.current[highlightedIndex]?.focus();
    }
  }, [highlightedIndex]);

  return (
    <div
      className={className}
      onKeyDown={handleKeyDown}
      ref={ref}
      onFocus={() => setIsOpen(true)}
      onBlur={() => setIsOpen(false)}
      role="combobox"
      aria-haspopup="listbox"
      aria-expanded={isOpen}
      aria-label={label}
      aria-activedescendant={highlightedIndex >= 0 ? `option-${highlightedIndex}` : undefined}
    >
      <Select
        {...props}
        id={id}
        size="default"
        style={{
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap",
        }}
        aria-label={label}
        invalid={!!error}
        showSearch
        placeholder="Please select"
        onChange={(option: any) => {
          setSelectedOption(option);
          onChangeHandler(option);
        }}
        getPopupContainer={() => document.querySelector("#root")}
      >
        {_.map(options, (option, index) => (
          <Option
            key={option}
            id={`option-${index}`}
            label={option}
            aria-label={option}
            aria-selected={selectedOption === option}
            value={option}
            ref={(el: HTMLDivElement | null) => (optionsRefs.current[index] = el)}
          >
            {option}
          </Option>
        ))}
      </Select>

      {/* Screen reader live region for announcing selection */}
      <div 
        aria-live="assertive" 
        style={{ position: "absolute", height: 0, width: 0, overflow: "hidden" }}
      >
        {selectedOption ? `Selected ${selectedOption}` : ""}
      </div>
    </div>
  );
};

SelectHoc.defaultProps = {
  highlightOption: true,
  mode: "default",
  tagColor: "selected",
};

export default SelectHoc;
