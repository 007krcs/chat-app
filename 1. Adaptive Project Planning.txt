import React, { useState, useEffect, useRef } from 'react';

function MyComponent({ onSubmitSearch }) {
  const [searchValue, setSearchValue] = useState(null);
  const [currentCaseId, setCurrentCaseId] = useState(null);
  const [selectedSearchType, setSelectedSearchType] = useState(null);
  const [caseReadyKey, setCaseReadyKey] = useState(null);

  // keep a stable ref to the latest onSubmitSearch so effect doesn't need it in deps
  const onSubmitRef = useRef(onSubmitSearch);
  useEffect(() => { onSubmitRef.current = onSubmitSearch; }, [onSubmitSearch]);

  // Run ONLY when caseReadyKey changes (marker), check the other states and then clear marker
  useEffect(() => {
    if (!caseReadyKey) return;

    // check that the three states reached expected values
    if (searchValue && selectedSearchType === 'caseId' && currentCaseId) {
      // use the ref to call the callback (stable)
      onSubmitRef.current(false);
    }

    // clear the marker once handled to avoid repeat firing
    setCaseReadyKey(null);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [caseReadyKey]); // deliberately only depend on the marker

  // in your API .then(...)
  const handleResponse = (response) => {
    const id = response.data?.case?.caseId;
    setSearchValue(id);
    setCurrentCaseId(id);
    setSelectedSearchType('caseId');

    // then set marker once - effect will check real states and call submit
    setCaseReadyKey(Date.now());
  };

  return <div/>;
}
