// keep the api
const [api, setApi] = useState<GridApi|null>(null);
const onGridReady = (e: GridReadyEvent) => setApi(e.api);

// helper to size columns (content-based)
const autoSize = useCallback(() => {
  if (!api) return;
  const cols = api.getColumns()?.map(c => c.getColId()) ?? [];
  if (cols.length) {
    // v31+ has autosize on Grid API
    // if your version doesn't, fall back to sizeColumnsToFit()
    try { (api as any).autoSizeColumns({ columns: cols, skipHeader: false }); }
    catch { (api as any).sizeColumnsToFit(); }
  }
}, [api]);

// after you update context/refresh, also autosize on the next frame
useEffect(() => {
  if (!api) return;

  // your existing context update + refresh
  const ctx = api.getGridOption('context') || {};
  api.setGridOption('context', { ...ctx, isCaseDisabled, isNewRequest });
  api.refreshHeader();
  api.refreshCells({ force: true, columns: ['nameAndDetailsSearchHelper'] });

  // 👇 prevent “shrunk columns” by resizing now
  requestAnimationFrame(autoSize);
}, [api, isCaseDisabled, isNewRequest, autoSize]);

// also handle initial render / container resizes
<AgGridReact
  onGridReady={onGridReady}
  onFirstDataRendered={() => requestAnimationFrame(autoSize)}
  onGridSizeChanged={autoSize}
  // ...rest of your props
/>
