import AdvancedTable from "./AdvancedTable";  // Adjust path based on file structure
interface Column {
  field: string;
  header: string;
  sortable?: boolean;
  filterable?: boolean;
  width?: string;
  expandable?: boolean;
  type?: "text" | "number" | "date";
}
const ParentComponent = () => {
  const columns: Column[] = [
    { field: "id", header: "ID", sortable: true, type: "text" },
    { field: "name", header: "Business Name", sortable: true, type: "text" },
    { field: "status", header: "Status", sortable: true, type: "text" },
    { field: "date", header: "Date", sortable: true, type: "date" },
    { field: "expand", header: "", expandable: true },  // ✅ Added for expandable rows
];;

const data = Array.from({ length: 50 }, (_, i) => ({
  id: `LEAD_${i + 1}`,
  name: `Business ${i + 1} Inc.`,
  status: i % 2 === 0 ? "Pass" : "Fail",
  date: new Date().toISOString().split("T")[0],  // ISO Date format
  details: { // ✅ Ensure each row has a details field
      description: `Additional information about ${i + 1}`,
      owner: `Owner ${i + 1}`,
  },
}));

  return (
      <AdvancedTable columns={columns} data={data} pageSize={10} />
  );
};

export default ParentComponent;









import React, { useState, useMemo, useEffect } from "react";
import { FaSort, FaSortUp, FaSortDown, FaPlus, FaMinus } from "react-icons/fa";
import { format, parseISO } from "date-fns";

interface Column {
  field: string;
  header: string;
  sortable?: boolean;
  filterable?: boolean;
  width?: string;
  expandable?: boolean;
  type?: "text" | "number" | "date";
}

interface Row {
  [key: string]: any;
}

interface Props {
  columns: Column[];
  data: Row[];
  pageSize?: number;
}

const FONT_OPTIONS = [
  "Arial, sans-serif",
  "'Courier New', monospace",
  "'Georgia', serif",
  "'Tahoma', sans-serif",
  "'Verdana', sans-serif",
];
const getFontColor = (bgColor: string): string => {
  // Convert HEX to RGB
  const hex = bgColor.replace("#", "");
  const r = parseInt(hex.substring(0, 2), 16);
  const g = parseInt(hex.substring(2, 4), 16);
  const b = parseInt(hex.substring(4, 6), 16);

  // Calculate luminance (formula used in W3C accessibility guidelines)
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;

  return luminance > 0.5 ? "#000000" : "#ffffff"; // Dark text on light bg, Light text on dark bg
};

const AdvancedTable: React.FC<Props> = ({ columns, data, pageSize = 10 }) => {
  const [sortField, setSortField] = useState<string | null>(null);
  const [sortOrder, setSortOrder] = useState<"asc" | "desc" | null>(null);
  const [searchText, setSearchText] = useState("");
  const [searchDate, setSearchDate] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [expandedRows, setExpandedRows] = useState<{ [key: string]: boolean }>({});
  const [backgroundColor, setBackgroundColor] = useState(() => localStorage.getItem("tableBgColor") || "#ffffff");
  const [fontFamily, setFontFamily] = useState(() => localStorage.getItem("tableFont") || FONT_OPTIONS[0]);
  const [fontColor, setFontColor] = useState(getFontColor(backgroundColor));

  // Store user settings in localStorage when changed
  useEffect(() => {
    localStorage.setItem("tableBgColor", backgroundColor);
    setFontColor(getFontColor(backgroundColor)); // Update font color dynamically
  }, [backgroundColor]);

  useEffect(() => {
    localStorage.setItem("tableFont", fontFamily);
  }, [fontFamily]);

  // Handle Sorting
  const handleSort = (field: string) => {
    if (sortField === field) {
      setSortOrder(sortOrder === "asc" ? "desc" : "asc");
    } else {
      setSortField(field);
      setSortOrder("asc");
    }
  };

  // Toggle Expand/Collapse
  const toggleExpand = (id: string) => {
    setExpandedRows((prev) => ({ ...prev, [id]: !prev[id] }));
  };
  


  const filteredData = useMemo(() => {
    return data.filter((row) => {
      let matchesSearch = false;
      let matchesDate = false;

      // 🔹 Search Text Filtering (Fix: Ensures it applies correctly)
      if (searchText.trim() !== "") {
        matchesSearch = Object.values(row).some((value) =>
          value.toString().toLowerCase().includes(searchText.toLowerCase())
        );
      } else {
        matchesSearch = true; // No search input means include all
      }

      // 🔹 Date Filtering (Fix: Ensures exact match)
      if (searchDate) {
        const rowDate = new Date(row.date).toISOString().split("T")[0]; // Normalize date
        const formattedSearchDate = new Date(searchDate).toISOString().split("T")[0];
        matchesDate = rowDate === formattedSearchDate;
      } else {
        matchesDate = true; // No date input means include all
      }

      // 🔹 Return only rows that match both filters
      return matchesSearch && matchesDate;
    });
  }, [searchText, searchDate, data]);




  // Sorting
  const sortedData = useMemo(() => {
    if (!sortField || !sortOrder) return filteredData;
    return [...filteredData].sort((a, b) => {
      const column = columns.find((col) => col.field === sortField);
      if (!column) return 0;

      let aValue = a[sortField];
      let bValue = b[sortField];

      if (column.type === "date") {
        aValue = parseISO(aValue).getTime();
        bValue = parseISO(bValue).getTime();
      }

      if (aValue < bValue) return sortOrder === "asc" ? -1 : 1;
      if (aValue > bValue) return sortOrder === "asc" ? 1 : -1;
      return 0;
    });
  }, [sortField, sortOrder, filteredData, columns]);

  // Pagination
  const totalPages = Math.ceil(sortedData.length / pageSize);
  const paginatedData = sortedData.slice((currentPage - 1) * pageSize, currentPage * pageSize);

  return (
    <div style={{ padding: "20px", maxWidth: "100%", background: backgroundColor, fontFamily }}>
     
    {/* Search Inputs & Format Dropdown */}
    <div style={{ display: "flex", gap: "10px", marginBottom: "15px", alignItems: "center" }}>
      <input
        type="text"
        placeholder="🔍 Search..."
        value={searchText}
        onChange={(e) => setSearchText(e.target.value)}
        style={{
          padding: "10px",
          width: "220px",
          borderRadius: "8px",
          border: "1px solid #ccc",
        }}
      />
      <input
        type="date"
        value={searchDate}
        onChange={(e) => setSearchDate(e.target.value)}
        style={{
          padding: "10px",
          borderRadius: "8px",
          border: "1px solid #ccc",
        }}
      />
       <div style={{ display: "flex", gap: "10px", marginBottom: "15px", alignItems: "center" }}>
        <input type="color" value={backgroundColor} onChange={(e) => setBackgroundColor(e.target.value)} />
        <select value={fontFamily} onChange={(e) => setFontFamily(e.target.value)}>
          {FONT_OPTIONS.map((font, index) => (
            <option key={index} value={font}>
              {font}
            </option>
          ))}
        </select>
      </div>
    </div>

    {/* Table */}
    <table style={{ width: "100%", borderCollapse: "collapse", borderRadius: "10px", overflow: "hidden", background: backgroundColor, fontFamily, color: fontColor }}>
      <thead>
        <tr style={{ background: backgroundColor, fontFamily, color: fontColor }}>
          {columns.map((col) => (
            <th
              key={col.field}
              style={{
                padding: "12px",
                borderBottom: "2px solid #ddd",
                cursor: col.sortable ? "pointer" : "default",
                textAlign: "left",
              }}
              onClick={() => col.sortable && handleSort(col.field)}
            >
              {col.header}
              {col.sortable && (
                <>
                  {" "}
                  {sortField === col.field ? (
                    sortOrder === "asc" ? (
                      <FaSortUp />
                    ) : (
                      <FaSortDown />
                    )
                  ) : (
                    <FaSort />
                  )}
                </>
              )}
            </th>
          ))}
        </tr>
      </thead>
      <tbody style={{background: backgroundColor}}>
        {paginatedData.map((row) => (
          <React.Fragment key={row.id}>
            <tr
              style={{
                borderBottom: "1px solid #ddd",
                background: expandedRows[row.id] ? backgroundColor : backgroundColor,
                fontFamily, color: fontColor
              }}
            >
              {columns.map((col) => (
                <td key={col.field} style={{ padding: "12px", textAlign: "left", backgroundColor }}>
                  {col.expandable ? (
                    <button
                      onClick={() => toggleExpand(row.id)}
                      style={{
                        background: "none",
                        border: "none",
                        cursor: "pointer",
                        color: "#007bff",
                        fontSize: "16px",
                      }}
                    >
                      {expandedRows[row.id] ? <FaMinus /> : <FaPlus />}
                    </button>
                  ) : col.type === "date" ? (
                    format(parseISO(row[col.field]), "MMM dd, yyyy")
                  ) : (
                    String(row[col.field])
                  )}
                </td>
              ))}
            </tr>

            {/* Expanded View */}
            {expandedRows[row.id] && row.details && (
              <tr>
                <td colSpan={columns.length} style={{ padding: "12px", background: "#f8f9fa", backgroundColor }}>
                  <table>
                    <thead>
                      <tr>
                        <th>Field</th>
                        <th>Value</th>
                      </tr>
                    </thead>
                    <tbody>
                      {Object.entries(row.details).map(([key, value]: any) => (
                        <tr key={key}>
                          <td><strong>{key}</strong></td>
                          <td>{String(value)}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </td>
              </tr>
            )}
          </React.Fragment>
        ))}
      </tbody>
    </table>

    {/* Pagination Controls */}
    <div style={{ marginTop: "15px", display: "flex", justifyContent: "space-between", alignItems: "center", background: backgroundColor, fontFamily, color: fontColor }}>
      <button
        onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
        disabled={currentPage === 1}
        style={{ padding: "8px 16px", borderRadius: "6px", background: "#007bff", color: "white", border: "none", cursor: "pointer" }}
      >
        Prev
      </button>
      <span> Page {currentPage} of {totalPages} </span>
      <button
        onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
        disabled={currentPage === totalPages}
        style={{ padding: "8px 16px", borderRadius: "6px", background: "#007bff", color: "white", border: "none", cursor: "pointer" }}
      >
        Next
      </button>
    </div>
  </div>
);
};

export default AdvancedTable;
